#!/bin/sh

. /usr/share/libubox/jshn.sh

CONFIG="config.tar.gz"
CONFIG_DIR="/var/lib/config/"
INITIAL="$(uci -q get lime.meshrc.initial)"

bmx7_add_sms_entry() {
    echo "add bmx7 entry $1"
    bmx7 -c syncSms="${1}"
}

bmx7_del_sms_entry() {
    uci delete bmx7.${1}
}

bmx7_add_sms_file() {
    filename = "basename($1)"
    bmx7_add_sms_entry "${filename}"
    ln -s "$1" "/var/run/bmx7/sms/sendSms/${filename}"
}

bmx7_del_sms_file() {
    filename = "basename($1)"
    #bmx7_del_sms_entry "${filename}"
    rm "/var/run/bmx7/sms/sendSms/${filename}"
}

update_initial_config() {
        cat <<EOF > "${CONFIG_DIR}/etc/uci-defaults/51_wifi"
#!/bin/sh

# take the same wifi settings as the current node
uci set lime.wifi.ieee80211s_mesh_id="$(uci -q get lime.wifi.ieee80211s_mesh_id)"
uci set lime.wifi.ieee80211s_key="$(uci -q get lime.wifi.ieee80211s_key)"
uci set lime.wifi.ap_key="$(uci -q get lime.wifi.ap_key)"

EOF

    # add gateway ssh keys on new clients
    [ -e /etc/dropbear/authorized_keys ] && \
        cat /etc/dropbear/authorized_keys > "${CONFIG_DIR}/etc/dropbear/authorized_keys"

    tar c -z -C "$CONFIG_DIR" . -x "${CONFIG}" -f "${CONFIG_DIR}/${CONFIG}"
    chmod 644 "${CONFIG_DIR}/${CONFIG}"
}

initial_config_distribution() {
    if [[ "$1" == "1" -o "$1" == "true" ]]; then 

        # load bmx7 id
        json_load "$(cat /var/run/bmx7/json/status)"
        json_select status
        json_get_var bmx7_nodeid nodeId

        # create required folders
        mkdir -p "${CONFIG_DIR}/etc/config/"
        mkdir -p "${CONFIG_DIR}/etc/uci-defaults/"
        mkdir -p "${CONFIG_DIR}/etc/dropbear/"

        # add initial config to activate ap/mesh and trust this node
        cat <<EOF > "${CONFIG_DIR}/etc/uci-defaults/50_initial_config"
#!/bin/sh

# activate the access point and mesh wifi
uci add_list lime.wifi.modes='ap'
uci add_list lime.wifi.modes='ieee80211s'

# all network interfaces are bridged an so br-lan is primary instead of eth0
uci set lime.network.primary_interface='br-lan'

# automatically trust this node
uci set lime.meshrc="lime"
uci delete lime.meshrc.trusted
uci add_list lime.meshrc.trusted='$bmx7_nodeid'
EOF

        cat <<EOF > "${CONFIG_DIR}/etc/uci-defaults/70_prometheus-node-exporter-lua"
#!/bin/sh

uci set prometheus-node-exporter.main.listen_address '::'
uci commit prometheus-node-exporter
EOF

        cat <<EOF > "${CONFIG_DIR}/etc/uci-defaults/80_lime-apply"
#!/bin/sh

# apply lime changes
lime-smart-wifi
lime-config
lime-apply
EOF

        # create initial config archive
        mkdir -p "/www/config/"
        update_initial_config

        # activate the config distribution via uhttpd
        uci -q set lime.meshrc="lime"
        uci -q set lime.meshrc.initial=true
        uci -q set uhttpd.nodeconfig=uhttpd
        uci -q set uhttpd.nodeconfig.home="$CONFIG_DIR"
        uci -q set uhttpd.nodeconfig.listen_http="8123"
    else
        # disable the config sharing
        uci -q delete uhttpd.nodeconfig
        uci -q set lime.meshrc.initial=false
    fi

    # apply setting and reload uhttpd
    uci commit lime
    uci commit uhttpd
    /etc/init.d/uhttpd reload
}

run_command() {
    echo "run command $1"
    if [[ "$node_id" == "" ]]; then
        # run on all nodes
        echo "$2" > "/var/run/bmx7/sms/sendSms/${1}"
        bmx7_add_sms_entry "${1}"
    else
        # run only on <node_id>
        echo "$2" > "/var/run/bmx7/sms/sendSms/${1}_${node_id}"
        bmx7_add_sms_entry "${1}_${node_id}"
    fi

    # update archive if distribution is activated
    [[ "$INITIAL" == "true" ]] && update_initial_config
}

run_lime() {
    echo "run lime $1"

    # if lime command is for all nodes, run on gateway as well
    if [[ "$node_id" == "" ]]; then
        uci -q set lime."${1}"
        # only apply changes if something was changed
        [[ "$(uci -q changes)" != "" ]] && {
            uci commit lime
            lime-config
            lime-apply
        }
    fi

    run_command "$1" "$2"
}

usage() {
    cat << EOF
Usage: $0 

    -h --help                           : show this message
    -i --shortid <shortid>              : short id of node to be configured
    -l --list-nodes                     : show all nodes of mesh network
    -H --hostname <name>                : sets node name for given shortId
    -a --ap-key <passworkd>             : set access point password of all nodes
    -m --mesh-id <new_id>               : set mesh id of all nodes
    -m --mesh-key <passworkd>           : set mesh password of all nodes
    -f --firstboot                      : resets all nodes by removing overlayfs
    -r --raw <command>                  : runs given command directly on node
    -s --set-ssh <ssh_keys>             : set ssh key to all nodes

Examples:

    $0 -i ABCD1234 -a "individual-ap-password"
    $0 -i BCDE2345 -r "reboot"
    $0 -m "new-mesh-password"
EOF
}

node_id=""

while [ "$#" ]; do
    case $1 in
        -h|--help)
            usage
            shift
            ;;
        -l|--list-nodes)
            bmx7 -c originators | tail -n +3 | awk '{ print $1" "$2 }'
            shift
            ;;
        -i|--shortid)
            node_id="$2"
            shift; shift
            ;;
        -H|--hostname)
            run_lime "lm-hn" "system.hostname=${2}"
            shift; shift
            ;;
        -a|--ap-key)
            run_lime "lm-ak" "wifi.ap_key=${2}"
            shift; shift
            ;;
        -d|--mesh-id)
            run_lime "lm-mi" "wifi.ieee80211s_mesh_id=${2}"
            shift; shift
            ;;
        -m|--mesh-key)
            run_lime "lm-mk" "wifi.ieee80211s_key=${2}"
            shift; shift
            ;;
        -f|--firstboot)
            read -p "confirm network reset [y/N]" -n 1 -r
            if [[ $REPLY == "Y" || $REPLY == "y" ]]
            then
                echo "send reset command to mesh network"
                run_command "rc-rst" "firstboot -y"
            else
                echo "reset canceled"
            fi
            shift
            ;;
        -r|--raw)
            run_command "rc-raw" "${2}"
            shift; shift
            ;;
        -s|--set-ssh)
            run_command "rc-ssh" "${2}"
            shift; shift
            ;;
        -I|--initial-distribution)
            initial_config_distribution "${2}"
            shift
            ;;
        --me)
            json_load "$(cat /var/run/bmx7/json/status)"
            json_select status
            json_get_var bmx7_nodeid nodeId
            echo "$bmx7_nodeid"
            shift
            ;;
        *)
            break
        ;;
    esac
done
