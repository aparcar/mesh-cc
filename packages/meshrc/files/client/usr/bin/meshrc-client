#!/bin/sh

# import OpenWrt script to handle json
. /usr/share/libubox/jshn.sh

# loads trusted bmx7 ids from lime(-defaults)
trusted_ids=$(uci -q get lime-defaults.meshrc.trusted)
[[ -z "$trusted_ids" ]]  && {
    trusted_ids=$(uci -q get lime.meshrc.trusted)
    [[ -z "$trusted_ids" ]] && {
        uci -q set lime.meshrc="lime"
        uci -q add_list lime.meshrc.trusted=""
        echo "please add section trusted_nodes in /etc/config/lime"
        exit 1
    }
}

# parses the own shortid and stores it in uci format
bmx7_shortid="$(uci -q get lime.system.bmx7_shortid)"
bmx7_nodeid="$(uci -q get lime.system.bmx7_nodeid)"
[[ -z "$bmx7_shortid" || -z "$bmx7_nodeid" ]] && {
    json_load "$(cat /var/run/bmx7/json/status)"
    json_select status
    json_get_var bmx7_shortid shortId
    json_get_var bmx7_nodeid nodeId
    uci -q set lime.system.bmx7_shortid="$bmx7_shortid"
    uci -q set lime.system.bmx7_nodeid="$bmx7_nodeid"
    uci commit lime
}

# return all node ids currently active in the network
active_node_ids() {
    echo "$(ls -1 /var/run/bmx7/json/originators/)"
}

# return all node ids which acked the comment $1
acked_command() {
    # own ack isn't in rcvdSms folder
    echo "$bmx7_nodeid"
    # trusted nodes may don't run the client and so no acks
    echo "$trusted_ids"
    # all acks from other nodes running the client
    echo "$(ls /var/run/bmx7/sms/rcvdSms/*:${1}-ack | cut -d '/' -f 7 | \
            cut -d ':' -f 1)"
}

# sync cmd $1-ack to the cloud and wait until all other nodes acked it
wait_cloud_synced() {
    ack_file="/var/run/bmx7/sms/sendSms/${1}-ack"
    # create & share acked file
    [[ -e "$ack_file" ]] || {
        touch "$ack_file"
        /usr/sbin/bmx7 -c syncSms="${1}-ack"
    }

    # check if cloud is synced for the specified task
    if [[ "$(active_node_ids | sort)" != "$(acked_command $1 | sort)" ]]; then
        # stop distribution of the ack
        rm "/var/run/bmx7/sms/sendSms/${1}-ack"
        # wait before executing the command to give bmx a bit more time to
        # distribute received acks to neighboured nodes
        sleep 5
        echo 1
    else
        sleep 5
        echo 0
    fi
}

run_lime() {
    echo "run lime $1"
    uci -q set lime."${1}"

    # only apply changes if something was changed
    [[ "$(uci -q changes)" != "" ]] && {
        uci commit lime
        lime-config
        lime-apply
    }
}

while true; do
    for trusted_id in $trusted_ids; do
        [[ -z "$trusted_id" ]] && return
        echo "$trusted_id"
        for config_path in $(ls /var/run/bmx7/sms/rcvdSms/${trusted_id}*); do
            config_file="$(basename $config_path | cut -d ':' -f 2)"
            echo "received config of trusted node ${config_file}"
            echo "$config_file"
            case $config_file in
                lm-*_${bmx7_shortid})
                    echo "run lime node spcific command $config_file"
                    run_lime "$(cat $config_path)"
                    continue
                    ;;
                lm-*_*) 
                    # ignore commands from other nodes
                    continue
                    ;;
                lm-*)
                    # if not yet synced skip command for now
                    [[ "$(wait_cloud_synced $config_file)" == 1 ]] || \
                        continue

                    run_lime "$(cat $config_path)"
                    ;;
                rc-ssh)
                    echo "run ssh key change"
                    # handle ssh changes as it's not an UCI setting
                    ssh_new="$(md5sum $config_path | cut -d ' ' -f 1)"
                    ssh_local="$(md5sum /etc/dropbear/authorized_keys | cut -d ' ' -f 1)"

                    # only apply new ssh keys if they changed
                    [[ "$ssh_new" != "$ssh_local" ]] && {
                        echo "copy new keys"
                        cp "$config_path" /etc/dropbear/authorized_keys
                    }
                    ;;
                rc-*_${bmx7_shortid})
                    echo "run generic node command $config_file"
                    $(cat "$config_path")
                    continue
                    ;;
                rc-*_*)
                    # ignore commands from other nodes
                    continue
                    ;;
                rc-*)
                    echo "run generic command $config_file"

                    # if not yet synced return
                    [[ "$(wait_cloud_synced $config_file)" == 1 ]] || \
                        continue

                    # raw content execution
                    $(cat "$config_path")
                    ;;
            esac
        done
    done

    # wait for newly received sms
    inotifywait -q -e delete -e create -e modify /var/run/bmx7/sms/rcvdSms || sleep 10
done
